<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>H.y's Blog</title><link href="http://hyhx2008.github.com/" rel="alternate"></link><link href="http://hyhx2008.github.com/feeds/all-zhs.atom.xml" rel="self"></link><id>http://hyhx2008.github.com/</id><updated>2012-11-13T17:26:00+09:00</updated><entry><title>VMware虚拟机启动时总提示cann't connect to floopy0的问题</title><link href="http://hyhx2008.github.com/vmwarexu-ni-ji-qi-dong-shi-zong-ti-shi-cannt-connect-to-floopy0de-wen-ti.html" rel="alternate"></link><updated>2012-11-13T17:26:00+09:00</updated><author><name>hyhx2008</name></author><id>tag:hyhx2008.github.com,2012-11-13:vmwarexu-ni-ji-qi-dong-shi-zong-ti-shi-cannt-connect-to-floopy0de-wen-ti.html</id><summary type="html">&lt;p&gt;在VMware中装了ubuntu，启动时总提示不能连接到设备floopy0，关也关不掉，很讨厌。&lt;/p&gt;
&lt;p&gt;百度了一下解决办法: 修改虚拟机的.vmx文件。&lt;/p&gt;
&lt;p&gt;1.将floppy0.autodetect这项改为FALSE:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;floppy0.autodetect = &amp;quot;FALSE&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.添加一句:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;floppy0.startConnected = &amp;quot;FALSE&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The End!!&lt;/p&gt;
</summary><category term="ubuntu"></category><category term="VMware"></category></entry><entry><title>使用pelican生成github博客</title><link href="http://hyhx2008.github.com/shi-yong-pelicansheng-cheng-githubbo-ke.html" rel="alternate"></link><updated>2012-11-11T22:20:00+09:00</updated><author><name>hyhx2008</name></author><id>tag:hyhx2008.github.com,2012-11-11:shi-yong-pelicansheng-cheng-githubbo-ke.html</id><summary type="html">&lt;p&gt;自从马星给我推荐在github上写博客到现在已经好久了，今天我终于算是学会了。
我看人家都是用jekyll生成静态页面的，果然和专业到技术宅差得太多，自己尝试折腾了一天也没弄出什么名堂。
马星觉得自己很菜，我居然比马星还菜。。。。。
在马星的诱惑下，用了这个不知到他从哪找来的工具，说实话倒是挺好用的。&lt;/p&gt;
&lt;p&gt;这里记录一下生成博客的步骤（以下内容大多copy自
&lt;a class="reference external" href="http://x-wei.github.com/pelican_github_blog.html"&gt;马星的blog&lt;/a&gt;
）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.配置git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注册github后首先要配置git。可以参考
&lt;a class="reference external" href="https://help.github.com/articles/set-up-git#platform-linux"&gt;github:help:set up git&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;设置用户名和邮箱，邮箱为注册github时的邮箱地址。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;hy&amp;quot;&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt;git config --global user.email &lt;span class="s2"&gt;&amp;quot;hyxxxxxx@163.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用下面的命令查看配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git config -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;github上说可以用https方法提交工程，但是没有成功过，所以还是需要利用ssh。这里需要生成ssh keys，
具体步骤参考
&lt;a class="reference external" href="https://help.github.com/articles/generating-ssh-keys#platform-linux"&gt;github:help:generating ssh keys&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;然后就可以进行git clone 和 git push等操作了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.生成github page&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要在github上新建一个仓库(repository)，这个仓库的名称必须为
&lt;strong&gt;your_id.github.com&lt;/strong&gt;
。然后将一个index.html文件上传到master分支后，就可以访问域名your_id.github.com看到自己的主页了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.安装和使用pelican&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pelican安装需要用到python-pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo aptitude install python-pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再用pip安装python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样pelican就安装完成了。&lt;/p&gt;
&lt;p&gt;pelican的使用也很简单, 需要在仓库根目录下新建一个配置文件settings.py, 内容大概如下所示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Asia/Tokyo&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;zhs&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H.y&amp;#39;s Blog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hyhx2008&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hysblog&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/hyhx2008&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://hyhx2008.github.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;UA-36075477-1&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#TAG_FEED_ATOM = &amp;#39;feeds/%s.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_CLOUD_STEPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#DEFAULT_ORPHANS=3&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tech&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;./pelican-themes/bootstrap&amp;#39;&lt;/span&gt;


&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x-wei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://x-wei.github.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;farseerfc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://farseerfc.github.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/hyhx2008&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各项的含义可以参见
&lt;a class="reference external" href="https://pelican.readthedocs.org/en/2.8/settings.html"&gt;pelican:settings&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;settings.py中有一项PAHT=`posts`, 指的是放置reST格式文件的目录，所以新建一个posts文件夹，然后将博客用
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;
格式写好之后放在posts文件夹下，即可用pelican生成静态页面了。在仓库根目录下用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;pelican -s settings.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以看到生成的index.html了。&lt;/p&gt;
&lt;p&gt;pelican还可以使用现成的模版，主题可以在github上下载:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git clone https://github.com/farseerfc/pelican-themes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;settings.py中的THEME项用来指定要使用的主题模版。&lt;/p&gt;
&lt;p&gt;如果和我一样觉得麻烦的话，可以在github上clone一个现成的博客修改学习，比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git clone git@github.com:hyhx2008/hyhx2008.github.com.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.将博客上传到github&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用以下三条命令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;git add .
&lt;span class="gp"&gt;$&lt;/span&gt;git commit -a -m &lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;收到一封页面修改成功的邮件后，就可以到自己的主页 your_id.github.com 查看了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.关于reST格式文件的编辑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pelican支持markdown和reST两种格式，由于reST的语法高亮比较容易，马星推荐我使用这个格式。附上两个教程:
&lt;a class="reference external" href="https://beinggeekbook.readthedocs.org/en/latest/rst.html"&gt;中文教程&lt;/a&gt;
,
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;官方英文教程&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;在linux环境下可以使用具有实时预览功能的ReText编辑器编辑reST文件，但是后来发现vim中支持reST文件的语法高亮，写起来也挺方便的。&lt;/p&gt;
&lt;p&gt;The End!&lt;/p&gt;
</summary><category term="GitHub"></category><category term="pelican"></category></entry><entry><title>Hello World!</title><link href="http://hyhx2008.github.com/hello-world.html" rel="alternate"></link><updated>2012-11-11T02:16:00+09:00</updated><author><name>hyhx2008</name></author><id>tag:hyhx2008.github.com,2012-11-11:hello-world.html</id><summary type="html">&lt;p&gt;终于建立起了我的github博客~!&lt;/p&gt;
&lt;p&gt;感谢马星手把手一步一步教我如何在github上写博客。&lt;/p&gt;
&lt;p&gt;说是博客，其实估计也没人看，就当做记笔记写总结到好地方了。&lt;/p&gt;
&lt;p&gt;以前都是用evernote写笔记的，但是在粘代码的时候不能语法高亮，所以听了马星的推荐在github上写博客，也算是赶个时髦吧～&lt;/p&gt;
</summary><category term="GitHub"></category></entry><entry><title>trace-cmd与kernelshark使用总结</title><link href="http://hyhx2008.github.com/trace-cmdyu-kernelsharkshi-yong-zong-jie.html" rel="alternate"></link><updated>2012-07-22T22:00:00+09:00</updated><author><name>hyhx2008</name></author><id>tag:hyhx2008.github.com,2012-07-22:trace-cmdyu-kernelsharkshi-yong-zong-jie.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;1.trace-cmd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;trace-cmd是对ftrace的封装，是一个可以用来跟踪linux内核中事件(event)发生的时间、次数等的工具。&lt;/p&gt;
&lt;p&gt;首先需要安装trace-cmd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo aptitude install trace-cmd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用也非常简单:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo trace-cmd record -e sched_switch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-e 参数指出需要跟踪的事件，这里的sched_switch指的是进程切换，还可以是hrtimer、irq等，例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo trace-cmd record -e sched_switch -e hrtimer*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令输完回车后，trace-cmd就开始记录内核中事件的发生了，ctrl+C 停止跟踪，此时会生成一个trace.dat文件，相当于一个log吧。&lt;/p&gt;
&lt;p&gt;trace.dat里的内容不易读，trace-cmd提供分析trace.dat的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;trace-cmd report
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以看到所跟踪的事件发生的情况了，和下图差不多。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="../statics/pics/trace_cmd_kernelshark1.png" src="../statics/pics/trace_cmd_kernelshark1.png" /&gt;
&lt;/div&gt;
&lt;p&gt;也可以重定向到一个文本文件中再做分析，比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;trace-cmd report &amp;gt; report.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟踪的报告就存入report.txt中了，可以用Perl等来处理。&lt;/p&gt;
&lt;p&gt;注:使用trace-cmd需要内核开启ftrace，即在编译内核make menuconfig时，选择下面的选项:&lt;/p&gt;
&lt;p&gt;Kernel Hacking -&amp;gt; Tracers -&amp;gt; Kernel Function Tracer&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.kernelshark&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;kernelshark提供了对trace.dat的可视化分析，首先安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo aptitude install kernelshark
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在trace.dat所在的目录输入:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;kernelshark
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即可看到图形化界面了:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="../statics/pics/trace_cmd_kernelshark2.png" src="../statics/pics/trace_cmd_kernelshark2.png" /&gt;
&lt;/div&gt;
&lt;p&gt;The End!!&lt;/p&gt;
</summary><category term="trace-cmd"></category><category term="kernelshark"></category></entry><entry><title>Linux内核编译步骤</title><link href="http://hyhx2008.github.com/linuxnei-he-bian-yi-bu-zou.html" rel="alternate"></link><updated>2012-07-18T22:00:00+09:00</updated><author><name>hyhx2008</name></author><id>tag:hyhx2008.github.com,2012-07-18:linuxnei-he-bian-yi-bu-zou.html</id><summary type="html">&lt;p&gt;实习的时候需要用到3.0.35-rt56版本的linux内核，这里总结一下Debian下Linux内核编译的步骤, ubuntu下可能略有不同。&lt;/p&gt;
&lt;p&gt;首先进入到内核源码的目录，然后按照以下步骤编译:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.配置内核&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;make menuconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条命令可以在一个GUI下设置用户需要的内核参数，并生成编译需要的.config配置文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.编译内核&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;make -j 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后面的-j参数指的是可以允许多少个module同时编译，-j 2 就是允许2个module同时编译，也可以省略-j参数。如果CPU是多核的话，可以加上该参数提高编译速度。&lt;/p&gt;
&lt;p&gt;接下来就是漫长的等待。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.加入模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo make modules_install
&lt;span class="gp"&gt;$&lt;/span&gt;sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.更新引导文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo update-initramfs -c -k &lt;span class="s2"&gt;&amp;quot;kernel version&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的kernel version可以在make menuconfig的时候自己设置名称，具体应该写什么需要在/boot文件夹下查看:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;ls -lF /boot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如内核版本为2.6.36，则/boot下就会有一个vmlinuz-2.6.36文件，把vmlinuz-后面的字符放在kernel version的位置即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.更新grub&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;sudo update-grub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个编译过程大概也得一两个小时左右吧，耐心等待。&lt;/p&gt;
&lt;p&gt;The End！！&lt;/p&gt;
</summary><category term="linux"></category><category term="kernel"></category><category term="compile"></category></entry></feed>